name: Publish Hub Dev

permissions: read-all

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch, tag or SHA to checkout"
        required: true
        type: string
        default: "main"

jobs:
  publish:
    name: linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        rust-profile: [release]
        rust-target: [aarch64-unknown-linux-musl, aarch64-unknown-linux-gnu, x86_64-unknown-linux-musl, x86_64-unknown-linux-gnu]  
    steps:
      - name: Install Fluvio
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          echo "$HOME/.fluvio/bin" >> $GITHUB_PATH
      - name: Install Fluvio CDK
        run: fluvio install cdk --develop
      - name: Fluvio Login to Dev Hub
        run: fluvio cloud login --email ${{ secrets.DEV_HUB_USER_EMAIL }} --password ${{ secrets.DEV_HUB_USER_PASSWORD }} --remote ${{ vars.DEV_CLOUD_URL }}
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.rust-profile }}
      - name: Install Cross
        run: cargo install cross
      - name: Build
        run: |
          cross build --profile ${{ matrix.rust-profile }}  --target ${{ matrix.rust-target }} -p sql-sink
          cp target/${{ matrix.rust-target }}/${{ matrix.rust-profile }}/* target/${{ matrix.rust-profile }}/ | true
      - name: Publish
        run: |
          cd crates/sql-sink
          cat hub/package-meta.yaml
          cdk publish --remote ${{ vars.DEV_HUB_URL }} --public-yes --target ${{ matrix.rust-target }}


  publish-macos-x86_64:
    name: macos-x86_64
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        rust-profile: [release]
        rust-target: [x86_64-apple-darwin]  
    steps:
      - name: Install Fluvio
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          echo "$HOME/.fluvio/bin" >> $GITHUB_PATH
      - name: Install Fluvio CDK
        run: fluvio install cdk --develop
      - name: Fluvio Login to Dev Hub
        run: fluvio cloud login --email ${{ secrets.DEV_HUB_USER_EMAIL }} --password ${{ secrets.DEV_HUB_USER_PASSWORD }} --remote ${{ vars.DEV_CLOUD_URL }}
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.rust-profile }}
      - name: Build
        run: |
          cargo build --profile ${{ matrix.rust-profile }}  --target ${{ matrix.rust-target }} -p sql-sink
          cp target/${{ matrix.rust-target }}/${{ matrix.rust-profile }}/* target/${{ matrix.rust-profile }}/ | true
      - name: Publish
        run: |
          cd crates/sql-sink
          cat hub/package-meta.yaml
          cdk publish --remote ${{ vars.DEV_HUB_URL }} --public-yes --target ${{ matrix.rust-target }}
    

    
  publish-macos-aarch64:
    name: macos-aarch64
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        rust-profile: [release]
        rust-target: [aarch64-apple-darwin] 
    env:
      OPENSSL_VERSION: 3.1.0
    steps:
      - name: Install Fluvio
        run: |
          curl -fsS https://packages.fluvio.io/v1/install.sh | bash
          echo "$HOME/.fluvio/bin" >> $GITHUB_PATH
      - name: Install Fluvio CDK
        run: fluvio install cdk --develop
      - name: Fluvio Login to Dev Hub
        run: fluvio cloud login --email ${{ secrets.DEV_HUB_USER_EMAIL }} --password ${{ secrets.DEV_HUB_USER_PASSWORD }} --remote ${{ vars.DEV_CLOUD_URL }}
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.rust-profile }}
      - name: Set OpenSSL target dir ENV 
        run: |
          export OPENSSL_TARGET_DIR=$HOME/openssl-aarch64
          echo "OPENSSL_TARGET_DIR=$OPENSSL_TARGET_DIR" >> $GITHUB_ENV
      - name: Restore compiled OpenSSL
        id: compiled-openssl-restore
        uses: actions/cache/restore@v3
        with:
          path: |
           ${{ env.OPENSSL_TARGET_DIR }}
          key: ${{ matrix.rust-target }}-openssl-${{ env.OPENSSL_VERSION }}    
      - name: Compile OpenSSL
        if: steps.compiled-openssl-restore.outputs.cache-hit != 'true'
        run: | 
          wget https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
          tar xvf openssl-$OPENSSL_VERSION.tar.gz
          cd openssl-$OPENSSL_VERSION
          ./configure darwin64-arm64-cc --prefix="$OPENSSL_TARGET_DIR"
          make
          make install
      - name: Save compiled OpenSSL
        if: steps.compiled-openssl-restore.outputs.cache-hit != 'true'
        id: compiled-openssl-save
        uses: actions/cache/save@v3
        with:
          path: |
           ${{ env.OPENSSL_TARGET_DIR }}
          key: ${{ steps.compiled-openssl-restore.outputs.cache-primary-key }}   
      - name: Build
        run: |
          rustup target add aarch64-apple-darwin
          OPENSSL_INCLUDE_DIR=$OPENSSL_TARGET_DIR/include OPENSSL_LIB_DIR=$OPENSSL_TARGET_DIR/lib  OPENSSL_STATIC=1 cargo build --profile ${{ matrix.rust-profile }}  --target ${{ matrix.rust-target }} -p sql-sink
          cp target/${{ matrix.rust-target }}/${{ matrix.rust-profile }}/* target/${{ matrix.rust-profile }}/ | true
      - name: Publish
        run: |
          cd crates/sql-sink
          cat hub/package-meta.yaml
          cdk publish --remote ${{ vars.DEV_HUB_URL }} --public-yes --target ${{ matrix.rust-target }}

    

